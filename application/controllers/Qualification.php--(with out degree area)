<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Qualification extends CI_Controller{

    function __construct(){
        parent::__construct();
        $this->load->model("qualification_model");
    }

    function index(){
        $roles = array(1,2);
        checkUserAccess($roles);

        $data = array();
    //    $this->load->helper('form');
        $data['title'] = 'Qualification';
        $role_id = $this->session->userdata['logged_in']['role_id'];
        $user_id = $this->session->userdata['logged_in']['id'];
        $data['role_id'] = $role_id;
        $data['qualification_select'] = get_qualification();
        $data['content'] = $this->load->view('qualification/view', $data, true); //true for return
        $this->load->view('template', $data);
    }

    function add(){
        $data = [];
        $roles = [1,2];
        checkUserAccess($roles);
        $this->load->library('form_validation');
        $this->load->helper(array('form'));
        $user_role_id = $this->session->userdata['logged_in']['role_id'];
        $user_id = $this->session->userdata['logged_in']['id'];
        $this->form_validation->set_error_delimiters('<div style="color:#F00;">', '</div>');
        $this->form_validation->set_rules('user_id', 'User', 'trim|required');
    //    $this->form_validation->set_rules('qualification_id', 'Qualification', 'trim|required');

        if ($this->form_validation->run() == TRUE) {
            /* start for image upload */
            $path = 'uploads/user_qualification';
            /*
            if ($_FILES['picture']['size'] > 0) {
                $insert['picture'] = file_upload('picture', $path);
            }
            */
            $insert['user_id'] = $this->input->post('user_id', TRUE);
            $qualification_ids = $this->input->post('qualification_id[]', TRUE);
            $qualifications = $this->input->post('qualification[]', TRUE);
            $institute = $this->input->post('institute[]', TRUE);
            $completion_year = $this->input->post('completion_year[]', TRUE);
            $time = time();
            if (!empty($qualification_ids) && count($qualification_ids)) {
                $i = 0;
                foreach ($qualification_ids as $qualification_id) {
                    $insert['qualification_id'] = $qualification_id;
                    $insert['qualification'] = $qualifications[$i];
                    $insert['institute'] = $institute[$i];
                    $insert['completion_year'] = $completion_year[$i];
                    $insert['created'] = $time;
                    $insert['created_by'] = $user_id;
                    $insert['updated'] = $time;
                    $insert['updated_by'] = $user_id;
                    $this->common_model->insert('tbl_user_qualification', $insert);
                    $i++;
                }
                $this->session->set_flashdata('success_response', "RECORD ADDED SUCCESSFULLY ");
                redirect(site_url('qualification'));
            }
        }
        $data['title'] = 'Add Academics';
        $data['role_id'] = $user_role_id;
        $data['user_id'] = $user_id;
        $data['qualification_select'] = get_qualification(0, '', 'qualification_id[]', 'required', 'Select Qualification');
        $data['user_select'] = get_user(0, '', 'user_id', 'required', 'Select User');
        $data['content'] = $this->load->view('qualification/add', $data, true); //true for return
        $this->load->view('template', $data);
    }

    function edit($id){
        $data = [];
        $roles = [1,2];
        checkUserAccess($roles);
        $this->load->library('form_validation');
        $this->load->helper(array('form'));
        $data['result'] = $this->qualification_model->get_details($id);
        $user_role_id = $this->session->userdata['logged_in']['role_id'];
        $user_id = $this->session->userdata['logged_in']['id'];
        $this->form_validation->set_error_delimiters('<div style="color:#F00;">', '</div>');
        $this->form_validation->set_rules('qualification_id', 'Qualification', 'trim|required|callback__ValidateQualification');

        if ($this->form_validation->run() == TRUE) {
            $update['qualification_id'] = $this->input->post('qualification_id', TRUE);
            $update['qualification'] = $this->input->post('qualification', TRUE);
            $update['institute'] = $this->input->post('institute', TRUE);
            $update['completion_year'] = $this->input->post('completion_year', TRUE);
            $update['updated'] = time();
            $update['updated_by'] = $user_id;
            $updateWhr['id'] = $id;
            $this->common_model->update('tbl_user_qualification', $update, $updateWhr);
            $this->session->set_flashdata('success_response', "RECORD UPDATED SUCCESSFULLY ");
            redirect(site_url('qualification'));
        }
        $data['title'] = 'Edit Academics';
        $data['role_id'] = $user_role_id;
        $data['user_id'] = $user_id;
    //    $data['rec_id'] = $id;
        $data['qualification_select'] = get_qualification($data['result']->qualification_id, '', 'qualification_id', 'required', 'Select Qualification');
        $data['content'] = $this->load->view('qualification/edit', $data, true); //true for return
        $this->load->view('template', $data);
    }

    function _ValidateQualification(){
        $qualification_id = $this->input->post('qualification_id', TRUE);
        $user_id = $this->input->post('user_id', TRUE);
    //    $id = $this->input->post('id', TRUE) ? $this->input->post('id', TRUE) : 0;
    //    pre($this->input->post(),1);
        $result = $this->qualification_model->unique_check($qualification_id, $user_id);
        if ($result) {
            $this->form_validation->set_message('_ValidateQualification', 'Degree/Transcript Already Added');
            return false;
        } else {
            return TRUE;
        }
    }

}
